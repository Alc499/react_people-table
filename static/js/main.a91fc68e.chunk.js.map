{"version":3,"sources":["api/getData.js","components/PersonInfo.js","components/PeopleTable.js","components/createSorterBy.js","components/NewPerson.js","App.js","index.js"],"names":["getPeople","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","fetch","then","response","json","stop","apply","this","arguments","getData","_ref2","_callee2","people","_context2","sent","map","person","index","objectSpread","id","age","died","born","century","Math","ceil","children","filter","child","father","name","mother","p","PersonInfo","onSelected","selected","personClasses","classnames","concat","person--selected","person__female","sex","person__male","person__lived-at-least-65","person__father","length","person__mother","personNameClasses","person__born-before-1650","person__died-after-1800","react_default","createElement","className","onClick","join","PeopleTable","state","selectedPersonId","_this2","props","components_PersonInfo","key","setState","React","Component","createSorterBy","sortField","currentKey","sortedPeople","reverse","toConsumableArray","sort","b","localeCompare","NewPerson","errorsMap","handleFormSubmit","event","_this$props","_this","onSubmit","peopleAmmount","preventDefault","prevState","keys","handleFieldChange","_event$target","target","value","checked","type","defineProperty","replace","split","_this$setState2","_this$state","htmlFor","placeholder","onChange","min","Date","getFullYear","App","visiblePeople","isVisible","loadData","sortBy","handleFilter","toLowerCase","trim","includes","toggleForm","addNewPerson","Fragment","components_NewPerson","components_PeopleTable","ReactDOM","render","src_App_0","test","document","getElementById"],"mappings":"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","file":"static/js/main.a91fc68e.chunk.js","sourcesContent":["const url = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nconst getPeople = async() => fetch(url)\n  .then(response => response.json());\nconst getData = async() => {\n  const people = await getPeople();\n\n  return people.map((person, index) => ({\n    ...person,\n    id: index + 1,\n    age: person.died - person.born,\n    century: Math.ceil(person.died / 100),\n    children: people\n      .filter(child => child.father === person.name\n        || child.mother === person.name)\n      .map(p => p.name),\n  }));\n};\n\nexport default getData;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst PersonInfo = ({ person, onSelected, selected }) => {\n  const personClasses = classnames(\n    'person',\n    `person__lived-in-${person.century}`,\n    {\n      'person--selected': selected,\n      person__female: person.sex === 'f',\n      person__male: person.sex === 'm',\n      'person__lived-at-least-65': person.age > 65,\n      person__father: person.sex === 'm' && person.children.length > 0,\n      person__mother: person.sex === 'f' && person.children.length > 0,\n    }\n  );\n  const personNameClasses = classnames(\n    {\n      'person__born-before-1650': person.born < 1650,\n      'person__died-after-1800': person.died > 1800,\n    }\n  );\n\n  return (\n    <tr\n      className={personClasses}\n      onClick={onSelected}\n    >\n      <td>{person.id}</td>\n\n      <td\n        className={personNameClasses}\n      >\n        {person.name}\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>{person.age}</td>\n      <td>\n        {person.mother === null || person.mother === ''\n          ? 'unknown'\n          : person.mother\n        }\n      </td>\n      <td>\n        {person.father === null || person.father === ''\n          ? 'unknown'\n          : person.father\n        }\n      </td>\n      <td>\n        {person.children.length > 0\n          ? person.children.join(', ')\n          : 'unknown'\n        }\n      </td>\n    </tr>\n  );\n};\n\nPersonInfo.propTypes = {\n  person: PropTypes.shape({\n    id: PropTypes.number,\n    century: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    sex: PropTypes.string.isRequired,\n    born: PropTypes.number.isRequired,\n    died: PropTypes.number,\n    age: PropTypes.number.isRequired,\n    mother: PropTypes.string,\n    father: PropTypes.string,\n    children: PropTypes.array,\n  }).isRequired,\n  onSelected: PropTypes.func.isRequired,\n  selected: PropTypes.bool.isRequired,\n};\n\nexport default PersonInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PersonInfo from './PersonInfo';\n\nclass PeopleTable extends React.Component {\n  state = {\n    selectedPersonId: null,\n  };\n\n  render() {\n    const { people } = this.props;\n    const { selectedPersonId } = this.state;\n\n    return (\n      <table className=\"people-table\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Sex</th>\n            <th>Born</th>\n            <th>Died</th>\n            <th>Age</th>\n            <th>Mother</th>\n            <th>Father</th>\n            <th>Children</th>\n          </tr>\n        </thead>\n        <tbody>\n          {people.map(person => (\n            <PersonInfo\n              person={person}\n              key={person.id}\n              selected={person.id === selectedPersonId}\n              onSelected={() => this.setState({ selectedPersonId: person.id })}\n            />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default PeopleTable;\n","const createSorterBy = (sortField, currentKey, sortedPeople, people) => {\n  if (currentKey === sortField) {\n    return sortedPeople.reverse();\n  }\n\n  currentKey = sortField;\n\n  sortedPeople = [...people].sort((a, b) => {\n    switch (typeof a[sortField]) {\n      case 'string':\n        return a[sortField].localeCompare(b[sortField]);\n\n      case 'number':\n      case 'boolean':\n        return a[sortField] - b[sortField];\n\n      default:\n        return 0;\n    }\n  });\n\n  return sortedPeople;\n};\n\nexport default createSorterBy;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewPerson extends React.Component {\n  state ={\n    name: '',\n    sex: '',\n    born: '',\n    died: '',\n    mother: '',\n    father: '',\n    children: [],\n\n    errorsMap: {\n      name: '',\n      born: '',\n      age: '',\n      sex: '',\n    },\n  };\n\n  handleFormSubmit = (event) => {\n    const { onSubmit, peopleAmmount } = this.props;\n\n    const errorsMap = {};\n\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      const {\n        died,\n        born,\n        name,\n        sex,\n        children,\n        mother,\n        father,\n      } = prevState;\n\n      const age = (died === ''\n        ? 2019 - +born\n        : +died - +born);\n\n      if (!name) {\n        errorsMap.name = 'Name is required';\n      }\n\n      if (!born) {\n        errorsMap.born = 'Year of birth is required';\n      }\n\n      if (!sex) {\n        errorsMap.sex = 'Please, choose your gender';\n      }\n\n      if (age < 0 || age > 150) {\n        errorsMap.age = 'Invalid year of birth and/or year of death';\n      }\n\n      if (Object.keys(errorsMap).length > 0) {\n        return { errorsMap };\n      }\n\n      onSubmit({\n        id: peopleAmmount + 1,\n        age: (died === ''\n          ? 2019 - +born\n          : +died - +born),\n        name,\n        sex,\n        born: +born,\n        died: (died === ''\n          ? ''\n          : +died),\n        children,\n        mother,\n        father,\n      });\n\n      return {};\n    });\n\n    this.setState({\n      name: '',\n      sex: '',\n      born: '',\n      died: '',\n      mother: '',\n      father: '',\n      children: [],\n    });\n  };\n\n  handleFieldChange = (event) => {\n    const {\n      name, value, checked, type,\n    } = event.target;\n\n    if (type === 'checkbox') {\n      this.setState({\n        [name]: checked,\n      });\n    } else if (name === 'children') {\n      this.setState({\n        children: value.replace(/[^\\w, ]/, '').split(', '),\n      });\n    } else {\n      this.setState({\n        [name]: value.replace(/[^\\w ]/, ''),\n\n        errorsMap: {\n          name: '',\n          born: '',\n        },\n      });\n    }\n  };\n\n  render() {\n    const {\n      died,\n      born,\n      name,\n      children,\n      mother,\n      father,\n      errorsMap\n    } = this.state;\n\n    return (\n      <form\n        className=\"add-person-form\"\n        onSubmit={this.handleFormSubmit}\n      >\n        <div>\n          <label htmlFor=\"name-field\">\n            Person's name:\n\n            <input\n              className=\"add-person-form__field\"\n              id=\"name-field\"\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              placeholder=\"FirstName LastName\"\n              onChange={this.handleFieldChange}\n            />\n          </label>\n\n          {errorsMap.name && (\n            <div className=\"add-person-form__error\">\n              {errorsMap.name}\n            </div>\n          )}\n        </div>\n\n        <div className=\"add-person-form__sex-fields\">\n          <label htmlFor=\"male-sex\">\n            <input\n              className=\"add-person-form__field add-person-form__sex-field\"\n              id=\"male-sex\"\n              type=\"radio\"\n              name=\"sex\"\n              value=\"m\"\n              onChange={this.handleFieldChange}\n            />\n            Male\n          </label>\n\n          <label htmlFor=\"female-sex\">\n            <input\n              className=\"add-person-form__field add-person-form__sex-field\"\n              id=\"female-sex\"\n              type=\"radio\"\n              name=\"sex\"\n              value=\"f\"\n              onChange={this.handleFieldChange}\n            />\n            Female\n          </label>\n\n          {errorsMap.sex && (\n            <div className=\"add-person-form__error\">\n              {errorsMap.sex}\n            </div>\n          )}\n        </div>\n\n        <div className=\"add-person-form__years-fields\">\n          <div>\n            <label htmlFor=\"born-field\">\n              Year of birth:\n\n              <input\n                className=\"add-person-form__field add-person-form__years-field\"\n                id=\"born-field\"\n                type=\"number\"\n                name=\"born\"\n                value={born}\n                min=\"0\"\n                placeholder={new Date().getFullYear()}\n                onChange={this.handleFieldChange}\n              />\n            </label>\n\n            {errorsMap.born && (\n              <div className=\"add-person-form__error\">\n                {errorsMap.born}\n              </div>\n            )}\n          </div>\n\n          <label htmlFor=\"dead-field\">\n            Year of death:\n\n            <input\n              className=\"add-person-form__field add-person-form__years-field\"\n              id=\"dead-field\"\n              type=\"number\"\n              name=\"died\"\n              value={died}\n              min=\"0\"\n              placeholder={new Date().getFullYear()}\n              onChange={this.handleFieldChange}\n            />\n          </label>\n        </div>\n\n        {errorsMap.age && (\n          <div className=\"add-person-form__error\">\n            {errorsMap.age}\n          </div>\n        )}\n\n        <div>\n          <label htmlFor=\"mother-field\">\n            Person mother's name:\n\n            <input\n              className=\"add-person-form__field\"\n              id=\"mother-field\"\n              type=\"text\"\n              name=\"mother\"\n              value={mother}\n              placeholder=\"FirstName LastName\"\n              onChange={this.handleFieldChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <label htmlFor=\"father-field\">\n            Person father's name:\n\n            <input\n              className=\"add-person-form__field\"\n              id=\"father-field\"\n              type=\"text\"\n              name=\"father\"\n              value={father}\n              placeholder=\"FirstName LastName\"\n              onChange={this.handleFieldChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <label htmlFor=\"children-field\">\n            Person children's names:\n\n            <input\n              className=\"add-person-form__field\"\n              id=\"children-field\"\n              type=\"text\"\n              name=\"children\"\n              value={children}\n              placeholder=\"Please, separate names by comma\"\n              onChange={this.handleFieldChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <button\n            type=\"submit\"\n            className=\"add-person-form__btn\"\n          >\n            Add\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nNewPerson.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  peopleAmmount: PropTypes.number.isRequired,\n};\n\nexport default NewPerson;\n","import React from 'react';\nimport './App.css';\n\nimport getData from './api/getData';\nimport PeopleTable from './components/PeopleTable';\nimport createSorterBy from './components/createSorterBy';\nimport NewPerson from './components/NewPerson';\n\nclass App extends React.Component {\n  state = {\n    people: [],\n    visiblePeople: [],\n    sortField: 'id',\n    currentKey: '',\n    sortedPeople: [],\n    isVisible: false,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  loadData = async() => {\n    const people = await getData();\n\n    this.setState({\n      people,\n      visiblePeople: people,\n    });\n  };\n\n  sortBy = (sortField) => {\n    this.setState((prevState) => {\n      const {\n        people,\n        currentKey,\n        sortedPeople,\n      } = prevState;\n\n      return {\n        sortField,\n        visiblePeople: createSorterBy(\n          sortField,\n          currentKey,\n          sortedPeople,\n          people\n        ),\n      };\n    });\n  };\n\n  handleFilter = (event) => {\n    let { value } = event.target;\n\n    value = value.toLowerCase().trim();\n\n    this.setState(prevState => ({\n      visiblePeople: prevState.people.filter(\n        person => (\n          (person.name + person.mother + person.father)\n            .toLowerCase()\n            .includes(value)\n        )\n      ),\n    }));\n  }\n\n  toggleForm = () => {\n    this.setState(prevState => ({\n      isVisible: !prevState.isVisible,\n    }));\n  }\n\n  addNewPerson = (person) => {\n    this.setState((prevState) => {\n      const people = [...prevState.people, person];\n\n      return {\n        people,\n        visiblePeople: people,\n      };\n    });\n  }\n\n  render() {\n    const { visiblePeople, isVisible } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>People table</h1>\n\n        <div className=\"sort-buttons\">\n          <h2>\n            Sort by:\n          </h2>\n\n          <button\n            type=\"button\"\n            onClick={() => this.sortBy('id')}\n            className=\"sort-buttons__btn\"\n          >\n            ID\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={() => this.sortBy('name')}\n            className=\"sort-buttons__btn\"\n          >\n            Name\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={() => this.sortBy('age')}\n            className=\"sort-buttons__btn\"\n          >\n            Age\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={() => this.sortBy('born')}\n            className=\"sort-buttons__btn\"\n          >\n            Year of birth\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={() => this.sortBy('died')}\n            className=\"sort-buttons__btn\"\n          >\n            Year of death\n          </button>\n        </div>\n\n        <div className=\"filter-input\">\n          <label htmlFor=\"name-input\">\n            Filter:\n            <input\n              className=\"filter-input__input\"\n              type=\"text\"\n              id=\"name-input\"\n              onChange={this.handleFilter}\n            />\n          </label>\n        </div>\n\n        { isVisible ? (\n          <>\n            <NewPerson\n              peopleAmmount={visiblePeople.length}\n              onSubmit={this.addNewPerson}\n            />\n\n            <div className=\"toggle-btn\">\n              <button\n                type=\"button\"\n                onClick={this.toggleForm}\n                className=\"toggle-btn\"\n              >\n                Hide form\n              </button>\n            </div>\n\n          </>\n        ) : (\n          <div className=\"toggle-btn\">\n            <button\n              type=\"button\"\n              onClick={this.toggleForm}\n              className=\"toggle-btn\"\n            >\n              Add new person\n            </button>\n          </div>\n        )\n        }\n\n        <PeopleTable people={visiblePeople} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App test={123} />, document.getElementById('root'));\n"],"sourceRoot":""}